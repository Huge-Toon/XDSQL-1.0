#pragma once
#ifndef _STORAGENODE_H
#define _STORAGENODE_H

#include "define.h"
#include <stdio.h>
#include<string>
#include<iostream>


using namespace std;


/*****************************************************************************
* @author  : Jiajun Chang,Hongguang Zhao                                                             *
* @date    : 
* @file    : 
* @brief   : 每个类储存一个文件的数据，提供对该文件内容的读写功能
*****************************************************************************/
class StorageNode {
public:
	/*****************************************************************************
	* @name    : StorageNode
	* @input   : filename:文件名(带有路径)
				 row_length:从元数据管理器中获取的一行数据的字节数
	* @output  : void
	* @brief   : 打开文件，得到对应的文件指针，初始化成员
	*****************************************************************************/
	StorageNode(string filename, int row_length);


	/*****************************************************************************
	* @name    : rnd_init
	* @input   : void
	* @output  : 移动成功返回true，否则返回false
	* @brief   : 将读写指针重定位到文件开头
	*****************************************************************************/
	bool rnd_init();



	/*****************************************************************************
	* @name    : rnd_next
	* @input   : void
	* @output  : 指向字节数组第二个元素的指针(第一个元素是标志位)
	* @brief   : 读一行数据并返回指针。若读到了无效行或读取失败，返回NULL
	*****************************************************************************/
	char* rnd_next();



	/*****************************************************************************
	* @name    : write_row
	* @input   : 要写入文件的字节数组
	* @output  : 写入成功返回true，否则返回false
	* @brief   : 将row对应的字节数组写入文件
	*****************************************************************************/
	bool write_row(char* row);




	/*****************************************************************************
	* @name    : update_row
	* @input   : 要更新的字节数组
	* @output  : 更新成功返回true，否则返回false
	* @brief   : 该函数用于update表操作，当查询处理层通过迭代器找到要修改的行时，
	*			 就通过该函数先将读写指针移动到该行的起始处，然后用覆盖的方法更新
				 数据为row
	* 
	*****************************************************************************/
	bool update_row(char* row);




	/*****************************************************************************
	* @name    : delete_row
	* @input   : void
	* @output  : 删除成功返回true，否则返回false
	* @brief   : 该函数用于delete元组操作，当查询处理层通过迭代器找到要修改的行时，
	*			 就通过该函数先将读写指针移动到该行的标志位处，然后用覆盖的方法将其
				 修改为true，再将指针移动回原位置
	*****************************************************************************/
	bool delete_row();




	/*****************************************************************************
	* @name    : isEOF
	* @input   : void
	* @output  : 若已到达文件末尾，返回true，否则返回false
	* @brief   : 判断当前读写指针是否在文件的末尾
	*****************************************************************************/
	bool isEOF();



	/*****************************************************************************
	* @name    : ~StorageNode
	* @input   : void
	* @output  : void
	* @brief   : 回收对象的内存，关闭文件
	*****************************************************************************/
	~StorageNode();


	/*当前读写指针的位置*/
	int getposition();

	/*当前文件的大小*/
	int getfilesize();

private:
	FILE* fp;	/*文件指针*/
	int row_length;		/*一行数据的字节数*/
	char* current_row;	/*当前数据行的内容，用字节数组存储*/
};


#endif

